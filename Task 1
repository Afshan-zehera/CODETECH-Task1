#include <iostream>

struct Node {
    int data;
    Node* next;
};

class LinkedList {
public:
    LinkedList() : head(nullptr) {}

    void insert(int value) {
        Node* newNode = new Node{value, nullptr};
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void remove(int value) {
        if (!head) return;
        if (head->data == value) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }
        Node* temp = head;
        while (temp->next && temp->next->data != value) {
            temp = temp->next;
        }
        if (temp->next) {
            Node* nodeToDelete = temp->next;
            temp->next = temp->next->next;
            delete nodeToDelete;
        }
    }

    void print() {
        Node* temp = head;
        while (temp) {
            std::cout << temp->data << " ";
            temp = temp->next;
        }
        std::cout << std::endl;
    }

    Node* search(int value) {
        Node* temp = head;
        while (temp && temp->data != value) {
            temp = temp->next;
        }
        return temp;
    }

private:
    Node* head;
};

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
};

class BinaryTree {
public:
    BinaryTree() : root(nullptr) {}

    void insert(int value) {
        root = insertRec(root, value);
    }

    void remove(int value) {
        root = removeRec(root, value);
    }

    void inOrder() {
        inOrderRec(root);
        std::cout << std::endl;
    }

    TreeNode* search(int value) {
        return searchRec(root, value);
    }

private:
    TreeNode* root;

    TreeNode* insertRec(TreeNode* node, int value) {
        if (!node) return new TreeNode{value, nullptr, nullptr};
        if (value < node->data) {
            node->left = insertRec(node->left, value);
        } else if (value > node->data) {
            node->right = insertRec(node->right, value);
        }
        return node;
    }

    TreeNode* removeRec(TreeNode* node, int value) {
        if (!node) return nullptr;
        if (value < node->data) {
            node->left = removeRec(node->left, value);
        } else if (value > node->data) {
            node->right = removeRec(node->right, value);
        } else {
            if (!node->left) {
                TreeNode* temp = node->right;
                delete node;
                return temp;
            } else if (!node->right) {
                TreeNode* temp = node->left;
                delete node;
                return temp;
            }
            TreeNode* temp = minValueNode(node->right);
            node->data = temp->data;
            node->right = removeRec(node->right, temp->data);
        }
        return node;
    }

    TreeNode* minValueNode(TreeNode* node) {
        TreeNode* current = node;
        while (current && current->left) {
            current = current->left;
        }
        return current;
    }

    void inOrderRec(TreeNode* node) {
        if (node) {
            inOrderRec(node->left);
            std::cout << node->data << " ";
            inOrderRec(node->right);
        }
    }

    TreeNode* searchRec(TreeNode* node, int value) {
        if (!node || node->data == value) return node;
        if (value < node->data) {
            return searchRec(node->left, value);
        }
        return searchRec(node->right, value);
    }
};
#include <list>
#include <vector>

class Graph {
public:
    Graph(int V) : V(V) {
        adj = new std::list<int>[V];
    }

    Graph() {
        delete[] adj;
    }

    void addEdge(int v, int w) {
        adj[v].push_back(w);
        adj[w].push_back(v);
    }

    void removeEdge(int v, int w) {
        adj[v].remove(w);
        adj[w].remove(v);
    }

    void BFS(int s) {
        std::vector<bool> visited(V, false);
        std::list<int> queue;
        visited[s] = true;
        queue.push_back(s);
        while (!queue.empty()) {
            s = queue.front();
            std::cout << s << " ";
            queue.pop_front();
            for (auto adjNode : adj[s]) {
                if (!visited[adjNode]) {
                    visited[adjNode] = true;
                    queue.push_back(adjNode);
                }
            }
        }
        std::cout << std::endl;
    }

    void DFS(int v) {
        std::vector<bool> visited(V, false);
        DFSUtil(v, visited);
        std::cout << std::endl;
    }

    bool search(int v, int target) {
        std::vector<bool> visited(V, false);
        return searchUtil(v, target, visited);
    }

private:
    int V;
    std::list<int>* adj;

    void DFSUtil(int v, std::vector<bool>& visited) {
        visited[v] = true;
        std::cout << v << " ";
        for (auto adjNode : adj[v]) {
            if (!visited[adjNode]) {
                DFSUtil(adjNode, visited);
            }
        }
    }

    bool searchUtil(int v, int target, std::vector<bool>& visited) {
        visited[v] = true;
        if (v == target) return true;
        for (auto adjNode : adj[v]) {
            if (!visited[adjNode]) {
                if (searchUtil(adjNode, target, visited)) return true;
            }
        }
        return false;
    }
};

int main() {
    // Linked List
    LinkedList ll;
    std::cout<<"THE LINKED LIST"<<std::endl;
    ll.insert(1);
    ll.insert(2);
    ll.insert(3);
    std::cout<<"The items in the list are"<<std::endl;
    ll.print();
    ll.remove(2);
    std::cout<<"After removal of 2"<<std::endl;
    ll.print();
    std::cout << "Search 3: " << (ll.search(3) != nullptr) << std::endl;
    std::cout<<std::endl;

    // Binary Tree
    BinaryTree bt;
    std::cout<<"BINARY TREE"<<std::endl;
    bt.insert(4);
    bt.insert(2);
    bt.insert(6);
    std::cout<<"The order of binary tree"<<std::endl;
    bt.inOrder();
    bt.remove(2);
    std::cout<<"After remove 2"<<std::endl;
    bt.inOrder();
    std::cout << "Search 6: " << (bt.search(6) != nullptr) << std::endl;
    std::cout<<std::endl;

    // Graph
    std::cout<<"GRAPH"<<std::endl;
    Graph g(5);
    g.addEdge(0, 1);
    g.addEdge(0, 4);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 3);
    g.addEdge(3, 4);
    std::cout << "BFS from node 0: ";
    g.BFS(0);
    std::cout << "DFS from node 0: ";
    g.DFS(0);
    std::cout << "Search 3 from node 0: " << g.search(0, 3) << std::endl;

    return 0;
}
